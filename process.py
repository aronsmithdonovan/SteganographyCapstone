# process.py
#
# describe this file!!!

# -------------------------------------------------------------------------------------------

# imports
from cryptography.fernet import Fernet
import sys

# -------------------------------------------------------------------------------------------

# main
### allows use of this file's encryption and decryption methods from the command line
def main():
    # running loop
    while True:
        # prompt to either encrypt or decrypt
        print("\nWould you like to encrypt a message or decrypt a message?\nPlease type E for encrypt and D for decrypt, or type QUIT to quit.")
        encrypt_or_decrypt = str(input())
        
        # if encrypt...
        if encrypt_or_decrypt == "E":
            # gets message from user
            print("\nEnter message to encrypt:")
            message = str(input())
            
            # generates and prints key
            key = Fernet.generate_key()
            print("\nThank you. Generating key...\n\nYour generated key is:\n" + key.decode('utf-8') + "\n\nSave this key to be able to decrypt your message.")
            
            # encrypts message and prints encrypted message
            encrypted_message = encryptMessage(message, key)
            print("\nYour encrypted message is:\n" + encrypted_message.decode("utf-8"))
        
        # if decrypt...
        elif encrypt_or_decrypt == "D":
            # gets message from user
            print("\nEnter message to decrypt:")
            message = str(input())
            
            # generates key or gets key from user
            print("\nThank you.\n\nPlease provide the key used to encrypt the message:")
            key = str(input())
            
            # decrypts message and prints response
            decrypted_message = decryptMessage(message, key)
            print("\nYour decrypted message is:\n" + decrypted_message)

        # if quit...
        elif encrypt_or_decrypt == "QUIT":
            print("\nOkay, terminating program...")
            sys.exit()

        # else continue running loop
        else:
            continue
        
# -------------------------------------------------------------------------------------------

# encryptMessage
### message: string to be encrypted
### key: encryption key, must be generated by Fernet
### return: encryped message as bytes
def encryptMessage(message, key):
    # sanitize message
    sani_message = cleanMessage(str(message))
    b_sani_message = (bytes(sani_message, 'utf-8'))

    # process key
    k = Fernet(key)

    # encrypt message
    encrypted_msg = k.encrypt(b_sani_message)

    # return encrypted message
    return encrypted_msg

# -------------------------------------------------------------------------------------------

# decryptMessage
### message: string to be decrypted
### key: key used to encrypt the provided message
### return: the decrypted message as a string
def decryptMessage(message, key):
    # sanitize inputs
    # sani_key = cleanMessage(key.decode('utf-8'))
    sani_message = cleanMessage(str(message))
    b_sani_message = (bytes(sani_message, 'utf-8'))

    # process key
    k = Fernet(key)

    # decrypt message
    decrypted_msg = k.decrypt(b_sani_message)

    # return decrypted message
    return decrypted_msg.decode("utf-8")

# -------------------------------------------------------------------------------------------

# sanitizes a string OR terminates program if unacceptable characters are found in string
### message: string to be sanitized
### return: the sanitized string
def cleanMessage(message):
    # cast argument to string (precaution)
    message = str(message)

    # convert string to list of characters
    message_list = list(message)

    # convert list of characters to list of decimal ASCII values
    ascii_list = []
    for each in message_list:
        ascii_list.append(ord(each))
    
    # check ASCII values, then modify if needed and pop onto sani_list
    ### program will terminate if unacceptable ASCII values are in the string
    index = 0
    sani_list = []
    for index in range(0, len(ascii_list)):
        # check for unacceptable characters
        if 31 > ascii_list[index] >= 0 or ascii_list[index] >= 127:
            print("\nunacceptable character found in input.\nterminating program...")
            sys.exit()
        # adds \ before characters that need to be escaped (double quote, single quote, backslash, respectively)
        elif ascii_list[index] == 34 or ascii_list[index] == 39 or ascii_list[index] == 92:
            sani_list.append("\\" + message_list[index])
            index += 1
        else:
            sani_list.append(message_list[index])
            index +=1

    # convert sanitized list of characters to sanitized message
    sani_message = ""
    for each in sani_list:
        sani_message += each

    # return sanitized message
    return sani_message

# -------------------------------------------------------------------------------------------

# call main fxn
if __name__ == '__main__':
    main()    